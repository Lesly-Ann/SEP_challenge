(* declaring a free channel name *)
free c:channel.

(* declaring additional types; type bitstring is a default type *)
type pkey.
type skey.


(* declaring private names *)
free ska, skb, skc:skey [private]. 


(* Public key cryptography *)
fun pk(skey):pkey.		        (* public key*)
fun aenc(bitstring, pkey):bitstring. 	(* asymmetric encryption *)
fun adec(bitstring, skey):bitstring.	(* asymmetric decryption *)
fun h(bitstring):bitstring. (* hash function *)


(* equational theory for pk encryption *)
equation forall x:bitstring, y:skey; adec(aenc(x,pk(y)),y) = x.


(* events *)
event reach.

(* queries *)
query event(reach).



(* initiator process *)
let Pi(ski:skey, pkr:pkey) = 
	 new ki:bitstring; 
	 out(c, (h((pk(ski),ki)), aenc(ki, pkr)));
	 in(c, (x1:bitstring, x2:bitstring));
	 let (n:bitstring) = adec(x2, ski) in
		 let (=h((pkr, ki, n)), nr:bitstring) = x1 in
			 out(c, h(n)).
	 

(* responder process *)
let Pr (sk:skey, pki:pkey)=
	in(c, (y1:bitstring, y2:bitstring));
	let (kr:bitstring) = adec(y2, sk) in
		let (=h((pki(*pk(A)*),kr))) = y1 in
			new nr:bitstring; 
			out(c, (h((pk(sk), kr, nr)), aenc(nr, pki(*pk(A)*))));
			in(c, y3:bitstring);
			if h(nr) = y3 then event reach.
			
(* main process *)
process  ( Pi(ska, pk(skb)) | Pr(skb, pk(ska)) )






